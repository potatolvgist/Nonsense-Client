package wtf.bhopper.nonsense.module.impl.exploit;

import io.netty.util.internal.ThreadLocalRandom;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import wtf.bhopper.nonsense.event.impl.EventSendPacket;
import wtf.bhopper.nonsense.module.Module;
import wtf.bhopper.nonsense.module.setting.impl.EnumSetting;
import wtf.bhopper.nonsense.module.setting.impl.IntSetting;
import wtf.bhopper.nonsense.util.minecraft.client.PacketUtil;
import wtf.bhopper.nonsense.util.minecraft.player.PlayerUtil;

import java.util.ArrayDeque;
import java.util.Queue;

public class PingSpoofer extends Module {

    private final EnumSetting<Mode> mode = new EnumSetting<>("Mode", "mode", Mode.DELAY, value -> {
        this.minDelay.setDisplayed(value == Mode.DELAY);
        this.maxDelay.setDisplayed(value == Mode.DELAY);
        this.stackSize.setDisplayed(value == Mode.STACK);
    });
    private final IntSetting minDelay = new IntSetting("Min Delay", "Minimum attacks per second", 50, 5000, 200, "%dms", value -> {
        if (this.maxDelay.get() < value) {
            this.maxDelay.set(value);
        }
    });
    private final IntSetting maxDelay = new IntSetting("Max Delay", "Maximum attacks per second", 50, 5000, 300, "%dms", value -> {
        if (this.minDelay.get() > value) {
            this.minDelay.set(value);
        }
    });

    private final IntSetting stackSize = new IntSetting("Stack Size", "Packet stack size", 2, 20, 5);

    private final Queue<Packet<?>> packetStack = new ArrayDeque<>();

    public PingSpoofer() {
        super("Ping Spoofer", "Increases your ping server side", Category.EXPLOIT);
        this.addSettings(mode, minDelay, maxDelay, stackSize);
        this.mode.updateChange();
    }

    @EventHandler
    public void onSendPacket(EventSendPacket event) {
        switch (this.mode.get()) {
            case DELAY:
                if (event.packet instanceof C00PacketKeepAlive) {
                    event.cancel();
                    new Thread(() -> {
                        try {
                            Thread.sleep(minDelay.get().equals(maxDelay.get()) ? minDelay.get() : ThreadLocalRandom.current().nextInt(minDelay.get(), maxDelay.get()));
                        } catch (InterruptedException ignored) {}
                        if (PlayerUtil.canUpdate()) {
                            PacketUtil.sendNoEvent(event.packet);
                        }
                    }).start();
                }
                break;

            case STACK:
                if (event.packet instanceof C00PacketKeepAlive) {
                    event.cancel();
                    this.packetStack.add(event.packet);
                    if (this.packetStack.size() >= this.stackSize.get()) {
                        while (!this.packetStack.isEmpty()) {
                            PacketUtil.sendNoEvent(this.packetStack.poll());
                        }
                    }
                }
                break;

            case CANCEL:
                if (event.packet instanceof C00PacketKeepAlive) {
                    event.cancel();
                }
                break;

            case ZERO:
                if (event.packet instanceof C00PacketKeepAlive) {
                    ((C00PacketKeepAlive)event.packet).setKey(0);
                }
                break;
        }
    }

    @Override
    public String getSuffix() {
        return this.mode.getDisplayValue();
    }

    private enum Mode {
        DELAY,
        STACK,
        CANCEL,
        ZERO
    }

}
